// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NLPClient is the client API for NLP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NLPClient interface {
	Analyze(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Analysis, error)
}

type nLPClient struct {
	cc grpc.ClientConnInterface
}

func NewNLPClient(cc grpc.ClientConnInterface) NLPClient {
	return &nLPClient{cc}
}

func (c *nLPClient) Analyze(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Analysis, error) {
	out := new(Analysis)
	err := c.cc.Invoke(ctx, "/nlp.NLP/Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NLPServer is the server API for NLP service.
// All implementations must embed UnimplementedNLPServer
// for forward compatibility
type NLPServer interface {
	Analyze(context.Context, *Input) (*Analysis, error)
	mustEmbedUnimplementedNLPServer()
}

// UnimplementedNLPServer must be embedded to have forward compatible implementations.
type UnimplementedNLPServer struct {
}

func (UnimplementedNLPServer) Analyze(context.Context, *Input) (*Analysis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedNLPServer) mustEmbedUnimplementedNLPServer() {}

// UnsafeNLPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NLPServer will
// result in compilation errors.
type UnsafeNLPServer interface {
	mustEmbedUnimplementedNLPServer()
}

func RegisterNLPServer(s grpc.ServiceRegistrar, srv NLPServer) {
	s.RegisterService(&NLP_ServiceDesc, srv)
}

func _NLP_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NLPServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nlp.NLP/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NLPServer).Analyze(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

// NLP_ServiceDesc is the grpc.ServiceDesc for NLP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NLP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nlp.NLP",
	HandlerType: (*NLPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _NLP_Analyze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nlp.proto",
}
